//python

n=int(input())
l=[str(n)]
while n!=1:
    if n%2==0:
        n=int(n/2)
        l.append(str(n))
    else:
        n=(n*3)+1
        l.append(str(n))
print(' '.join(l))

//java
import java.io.*;
import java.util.*;
import java.util.stream.*;
 
public class Main {
 
  static void solve(PrintWriter out, Reader rd) throws Exception {
    long n = rd.nextLong();
 
    out.print(n + " ");
    while (n > 1) {
      if (n % 2 == 0) n /= 2;
      else n = n * 3 + 1;
      out.print(n + " ");
    }
 
    out.println();
  }
  public static void main(String[] args) throws Exception {
    Reader rd = new Reader();
    PrintWriter out = new PrintWriter(System.out, false);
    // int T = rd.nextInt();
    int T = 1;
    for (int z = 0; z < T; z++) {
      solve(out, rd);
    }
    out.close();
  }
 
  static long binpow(long a, long b) {
    long res = 1;
    while (b > 0) {
      if ((b & 1) == 1) res *= a;
      a *= a;
      b >>= 1;
    }
 
    return res;
  }
 
  public static int hcf(int a, int b) {
    if (b != 0) return hcf(b, a % b);
    else return a;
  }
 
  public static int lcm(int a, int b) {
    int hcfV = hcf(a, b);
    return (a * b) / hcfV;
  }
 
  static class Reader {
    BufferedReader br;
    StringTokenizer st;
 
    Reader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }
 
    int nextInt() throws Exception {
      return Integer.parseInt(next());
    }
 
    long nextLong() throws Exception {
      return Long.parseLong(next());
    }
 
    long[] readLongArray(int n) throws Exception {
      long result[] = new long[n];
      for (int i = 0; i < n; i++) {
        result[i] = nextLong();
      }
 
      return result;
    }
 
    int[] readIntArray(int n) throws Exception {
      int[] result = new int[n];
      for (int i = 0; i < n; i++) {
        result[i] = nextInt();
      }
      return result;
    }
 
    HashSet<Integer> readSet(int n) throws Exception {
      HashSet<Integer> out = new HashSet<>();
 
      for (int i = 0; i < n; i++) {
        out.add(nextInt());
      }
 
      return out;
    }
 
    String nextLine() throws Exception {
      return br.readLine().trim();
    }
 
    String next() throws Exception {
      if (st == null || !st.hasMoreTokens()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (Exception e) {
        }
      }
 
      return st.nextToken();
    }
  }
}

//c++

#include<stdio.h>
//#include<string>
#include<bits/stdc++.h>
#include<iostream>
using namespace std;;
int main()
{
long long n;
cin>>n;
cout<<n<<" ";
while(n>0)
{
    if(n==1)
    {
        //cout<<n<<" ";
        break;
    }
    else if(n%2==0)
    {
 
        n/=2;
        cout<<n<<" ";
    }else{
        n*=3;
        n++;
        cout<<n<<" ";
    }
}
 
return 0;
}


